// Code generated by MockGen. DO NOT EDIT.
// Source: src/usecase/esRepository.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	domain "go-es-testcode/src/domain"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockESRepository is a mock of ESRepository interface.
type MockESRepository struct {
	ctrl     *gomock.Controller
	recorder *MockESRepositoryMockRecorder
}

// MockESRepositoryMockRecorder is the mock recorder for MockESRepository.
type MockESRepositoryMockRecorder struct {
	mock *MockESRepository
}

// NewMockESRepository creates a new mock instance.
func NewMockESRepository(ctrl *gomock.Controller) *MockESRepository {
	mock := &MockESRepository{ctrl: ctrl}
	mock.recorder = &MockESRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockESRepository) EXPECT() *MockESRepositoryMockRecorder {
	return m.recorder
}

// FindShop mocks base method.
func (m *MockESRepository) FindShop(arg0, arg1, arg2 string) (*domain.ShopSearch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindShop", arg0, arg1, arg2)
	ret0, _ := ret[0].(*domain.ShopSearch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindShop indicates an expected call of FindShop.
func (mr *MockESRepositoryMockRecorder) FindShop(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindShop", reflect.TypeOf((*MockESRepository)(nil).FindShop), arg0, arg1, arg2)
}
