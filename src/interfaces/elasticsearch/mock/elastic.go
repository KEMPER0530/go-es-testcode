// Code generated by MockGen. DO NOT EDIT.
// Source: src/interfaces/elasticsearch/elastic.go

// Package mock_elasticsearch is a generated GoMock package.
package mock_elasticsearch

import (
	bytes "bytes"
	reflect "reflect"

	v8 "github.com/elastic/go-elasticsearch/v8"
	esapi "github.com/elastic/go-elasticsearch/v8/esapi"
	gomock "github.com/golang/mock/gomock"
)

// MockElastic is a mock of Elastic interface.
type MockElastic struct {
	ctrl     *gomock.Controller
	recorder *MockElasticMockRecorder
}

// MockElasticMockRecorder is the mock recorder for MockElastic.
type MockElasticMockRecorder struct {
	mock *MockElastic
}

// NewMockElastic creates a new mock instance.
func NewMockElastic(ctrl *gomock.Controller) *MockElastic {
	mock := &MockElastic{ctrl: ctrl}
	mock.recorder = &MockElasticMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockElastic) EXPECT() *MockElasticMockRecorder {
	return m.recorder
}

// ConnectElastic mocks base method.
func (m *MockElastic) ConnectElastic(arg0 string) (*v8.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConnectElastic", arg0)
	ret0, _ := ret[0].(*v8.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConnectElastic indicates an expected call of ConnectElastic.
func (mr *MockElasticMockRecorder) ConnectElastic(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConnectElastic", reflect.TypeOf((*MockElastic)(nil).ConnectElastic), arg0)
}

// Search mocks base method.
func (m *MockElastic) Search(arg0 string, arg1 bytes.Buffer, arg2 *v8.Client) (*esapi.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", arg0, arg1, arg2)
	ret0, _ := ret[0].(*esapi.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockElasticMockRecorder) Search(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockElastic)(nil).Search), arg0, arg1, arg2)
}
